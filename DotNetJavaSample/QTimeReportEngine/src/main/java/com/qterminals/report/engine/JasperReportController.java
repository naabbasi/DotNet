package com.qterminals.report.engine;

import com.qterminals.db.MySQLDataSource;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

import java.io.IOException;
import java.io.OutputStream;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class JasperReportController {

    public JasperReportController() {
    }

    public static void main(String[] args) throws IOException {
        JasperReportController jasperReportController = new JasperReportController();
        Map<String, Object> reportParams = new HashMap<>();
        reportParams.put("pReportTitle", "QTerminals");
        reportParams.put("pReportDescription", "Reporting engine to generate reports from Java/C#");
        reportParams.put("pMessage", "This report is generated by Java");

        byte[] report = jasperReportController.getReportAsPDFFile(reportParams);
        Path path = Paths.get("C:/reports/report-java.pdf");
        OutputStream outputStream = Files.newOutputStream(path);
        outputStream.write(report);
        outputStream.close();
    }

    private JasperPrint compileJasperReports(Map<String, Object> reportParams, List<?> data) {
        JasperPrint jasperPrint = null;
        try {
            final JasperReport compiledReport = getCompiledJasperReport();
            Map<String, Object> params = reportParams != null ? reportParams : Map.of();

            MySQLDataSource mySQLDataSource = new MySQLDataSource();
            Connection connection = mySQLDataSource.getConnection();
            jasperPrint = JasperFillManager.fillReport(compiledReport, params, connection);
            mySQLDataSource.close(connection);

        } catch (JRException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }


        return jasperPrint;
    }

    private JasperReport getCompiledJasperReport() throws JRException {
        URL url = JasperReportController.class.getResource("/reports/demo.jasper");

        JasperReport compiledReport;
        if (url == null) {
            compiledReport = compiledJasperReport();
        } else {
            compiledReport = (JasperReport) JRLoader.loadObject(url);
        }

        return compiledReport;
    }

    private JasperReport compiledJasperReport() throws JRException {
        overridingJasperReportDefaults();

        JasperDesign design = JRXmlLoader.load(JasperReportController.class.getResourceAsStream("/reports/demo.jrxml"));

        final JasperReport compiledReport = JasperCompileManager.compileReport(design);
        return compiledReport;
    }

    private void overridingJasperReportDefaults() {
        DefaultJasperReportsContext.getInstance().setProperty("net.sf.jasperreports.export.character.encoding", "UTF-8");
        DefaultJasperReportsContext.getInstance().setProperty("net.sf.jasperreports.chrome.enabled", "true");
        DefaultJasperReportsContext.getInstance().setProperty("net.sf.jasperreports.chrome.headless", "true");
        DefaultJasperReportsContext.getInstance().setProperty("net.sf.jasperreports.chrome.executable.path", "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe");
        DefaultJasperReportsContext.getInstance().setProperty("net.sf.jasperreports.export.pdf.force.svg.shapes", "true");
        DefaultJasperReportsContext.getInstance().setProperty("net.sf.jasperreports.export.pdf.glyph.renderer.add.actual.text", "true");
        DefaultJasperReportsContext.getInstance().setProperty("net.sf.jasperreports.export.html.embedded.svg.use.fonts", "false");
        DefaultJasperReportsContext.getInstance().setProperty("net.sf.jasperreports.export.html.convert.svg.to.image", "false");
        DefaultJasperReportsContext.getInstance().setProperty("net.sf.jasperreports.export.html.flush.output", "true");
        DefaultJasperReportsContext.getInstance().setProperty("net.sf.jasperreports.export.parameters.override.report.hints", "true");
    }

    public void generateReport(Map<String, Object> reportParams, OutputStream outputStream) {
        try {
            JasperPrint jasperPrint = this.compileJasperReports(reportParams, null);
            JasperExportManager.exportReportToPdfStream(jasperPrint, outputStream);
            outputStream.flush();
            outputStream.close();
        } catch (IOException | JRException e) {
            e.printStackTrace();
        }
    }

    public void generateReport(Map<String, Object> reportParams, List<?> data, OutputStream outputStream) {
        try {
            JasperPrint jasperPrint = this.compileJasperReports(reportParams, data);
            JasperExportManager.exportReportToPdfStream(jasperPrint, outputStream);
            outputStream.flush();
        } catch (IOException | JRException e) {
            e.printStackTrace();
        }
    }

    public byte[] getReportAsPDFFile(Map<String, Object> reportParams, List<?> data) {
        try {
            JasperPrint jasperPrint = this.compileJasperReports(reportParams, data);
            return JasperExportManager.exportReportToPdf(jasperPrint);
        } catch (JRException e) {
            e.printStackTrace();
        }

        return null;
    }

    public byte[] getReportAsPDFFile(Map<String, Object> reportParams) {
        try {
            JasperPrint jasperPrint = this.compileJasperReports(reportParams, null);
            return JasperExportManager.exportReportToPdf(jasperPrint);
        } catch (JRException e) {
            e.printStackTrace();
        }

        return null;
    }
}
